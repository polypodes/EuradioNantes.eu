sonata_core: ~
sonata_block:
    default_contexts: [cms]
    # Sonata Page:
    context_manager: sonata.page.block.context_manager
    blocks:
        # Enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts:   [admin]
        sonata.admin.block.search_result:
            contexts:   [admin]
        sonata.block.service.text:

        sonata.block.service.rss:

        # Some specific block from the SonataMediaBundle
        sonata.media.block.media:
        sonata.media.block.gallery:
        sonata.media.block.feature_media:

        # User bundle
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)


        # @todo check against actual params in production
        #sonata.block.service.wysiwyg:
        #sonata.block.service.action:

sonata_user:
    manager_type: orm # can be orm or mongodb
    #security_acl: true
    security_acl: false
    class:
        user:         Application\Sonata\UserBundle\Entity\User
        group:        Application\Sonata\UserBundle\Entity\Group

    profile:  # Profile Form (firstname, lastname, etc ...)
        form:
            type:               sonata_user_profile
            handler:            sonata.user.profile.form.handler.default
            name:               sonata_user_profile_form
            validation_groups:  [Profile]

sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    default_context: default
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr
    contexts:
        default:  # the default context is mandatory
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file
                - sonata.media.provider.podcast # custom
            # @todo check against actual params in production
            formats:
                large: { width: 850, height: 510,  quality: 80}
                large_mobile: { width: 450, height: 270,  quality: 80}
                list_desktop: { width: 300, height: 165, quality: 80}
                list_mobile: { width: 450, height: 246, quality: 80}
                list_tablet: { width: 570, height: 312, quality: 80}
                list_medium: { width: 470, height: 215, quality: 80}
                list_program: { width: 100, height: 50, quality: 80}

                #big: { width: 850, height: 510,  quality: 80}
                #medium: { width: 450, height: 270,  quality: 80}
                #small: { width: 100 , quality: 70}
                #logo: { width: 189 , quality: 70}
                #pub: { width: 728 , height: 90 , quality: 70}

    cdn:
        server:
            path: http://www.euradionantes.eu/uploads/media # http://media.sonata-project.org/
            # @todo check against actual params in production

    filesystem:
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     true
            # @todo check against actual params in production

    providers:
        #podcast:
        #    service: sonata.media.provider.podcast
        #    filesystem: sonata.media.filesystem.podcasts
        #image:
            #resizer: sonata.media.resizer.square
            # @todo check against actual params in productionyy

sonata_page:
    multisite: host
    use_streamed_response: true # set the value to false in debug mode or if the reverse proxy does not handle streamed response
    ignore_route_patterns:
        - ^(.*)admin(.*)   # ignore admin route, ie route containing 'admin'
        - ^(.*)whoami(.*)   # ignore admin route, ie route containing 'admin'
        - ^_(.*)          # ignore symfony routes

    ignore_routes:
        - sonata_page_esi_cache
        - sonata_page_ssi_cache
        - sonata_page_js_sync_cache
        - sonata_page_js_async_cache
        - sonata_cache_esi
        - sonata_cache_ssi
        - sonata_cache_js_async
        - sonata_cache_js_sync
        - sonata_cache_apc
        - ecoute # ignore ecoute page for ajax loading

    ignore_uri_patterns:
        - ^/admin\/   # ignore admin route, ie route containing 'admin'

    page_defaults:
        homepage: {decorate: false} # disable decoration for homepage, key - is a page route

    default_template: default # template key from templates section, used as default for pages

    # manage the http errors
    catch_exceptions:
        not_found: [404]    # render 404 page with "not_found" key (name generated: _page_internal_error_{key})
        fatal:     [500]    # so you can use the same page for different http errors or specify specific page for each error

    slugify_service:   sonata.core.slugify.cocur # old BC value is sonata.core.slugify.native
    #slugify_service:   sonata.core.slugify.native # old BC value is sonata.core.slugify.native
    multisite:        host
    default_template: default # template key from templates section, used as default for
    templates:
        default:
            path: 'ApplicationSonataPageBundle::layout.html.twig'
            name: 'default'
            containers:
                #header:
                #    name: Header
                #content_top:
                #    name: Top content
                content:
                    name: Main content
                #content_bottom:
                #    name: Bottom content
                #footer:
                #    name: Footer
            matrix:
                layout: |
                    CCCCCCCC
                    CCCCCCCC
                mapping:
                    #H: header
                    #T: content_top
                    C: content
                    #B: content_bottom
                    #F: footer
        empty:
            path: 'ProgramBundle:empty_layout.html.twig'
            name: empty
        ecoute:
            path: 'ProgramBundle::layout_ecoute.html.twig'
            name: ecoute

        #2columns: { path: 'SonataPageBundle::2columns_layout.html.twig', name: '2 columns layout' }

    # Generates a snapshot when a page is saved (from the admin)
    direct_publication: true # or %kernel.debug% if you want to publish in dev mode (but not in prod)

sonata_admin:
    options:
        use_select2: true
    #assets:
        #javascripts:
        #    - bundles/sonataadmin/vendor/jquery/dist/jquery.min.js
        #    - bundles/sonataadmin/vendor/jquery.scrollTo/jquery.scrollTo.js
        #    - bundles/sonataadmin/vendor/jqueryui/ui/minified/jquery-ui.min.js
        #    - bundles/sonataadmin/vendor/jqueryui/ui/minified/i18n/jquery-ui-i18n.min.js
        #    - bundles/sonatapage/sonata-page.back.min.js

        #stylesheets:
        #    - bundles/sonataadmin/vendor/AdminLTE/css/font-awesome.min.css
        #    - bundles/sonataadmin/vendor/jqueryui/themes/flick/jquery-ui.min.css
        #    - bundles/sonatapage/sonata-page.back.min.css

sonata_notification:
    admin:
        enabled: true
    backend: sonata.notification.backend.doctrine
    #backend: sonata.notification.backend.runtime
    backends:
        doctrine:
            message_manager: sonata.notification.manager.message.default
            max_age:         86400     # max age in second
            pause:           500000    # delay in microseconds
            batch_size:      10        # number of messages on each iteration
            states:                    # raising errors level
                in_progress: 10
                error:       20
                open:        100
                done:        10000

sonata_seo:
    encoding:         UTF-8
    page:
        default:          sonata.seo.page.default
        title:            Sonata Project
        metas:
            name:
                #keywords:             foo bar
                #description:          The description
                robots:               index, follow

            property:
                # Facebook application settings
                #'fb:app_id':          XXXXXX
                #'fb:admins':          admin1, admin2

                # Open Graph information
                # see http://developers.facebook.com/docs/opengraphprotocol/#types or http://ogp.me/
                'og:site_name':       Euradionantes
                #'og:description':

            #http-equiv:
                #'Content-Type':         text/html; charset=utf-8
                #'X-Ua-Compatible':      IE=EmulateIE7

            #charset:
                #UTF-8:    ''

        #head:
            #'xmlns':              http://www.w3.org/1999/xhtml
            #'xmlns:og':           http://opengraphprotocol.org/schema/
            #'xmlns:fb':           "http://www.facebook.com/2008/fbml"

sonata_news:
    admin:
        post:
            class:      Application\Sonata\NewsBundle\Admin\PostAdmin
    title:        "Les actualités d'Euradio"
    link:         http://euradionantes.eu
    description:  "L’Europe vue d'une autre oreille"
    salt:         'yoiuplaboumsitck'
    permalink_generator: sonata.news.permalink.date # sonata.news.permalink.collection

    comment:
        notification:
            # @todo: move this to parameters.yml
            emails:   [webmaster@euradionantes.eu]
            from:     no-reply@euradionantes.eu
            template: 'SonataNewsBundle:Mail:comment_notification.txt.twig'

sonata_formatter:
    formatters:
        markdown:
            service: sonata.formatter.text.markdown
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

sonata_cache:
#    caches:
#        esi:
#            token: an unique security key # a random one is generated by default
#            servers:
#                - varnishadm -T 127.0.0.1:2000 {{ COMMAND }} "{{ EXPRESSION }}"
#        predis:
#            servers:
#                - {host: 127.0.0.1, port: 6379, database: 42}
#
#        apc:
#            token:  s3cur3   # token used to clear the related cache
#            prefix: test     # prefix to ensure there is no clash between instances
#            servers:
#                - { domain: kooqit.local, ip: 127.0.0.1, port: 80}
#
#        symfony:
#            token: s3cur3 # token used to clear the related cache
#            php_cache_enabled: true # Optional (default: false), clear APC or PHP OPcache
#            types: [mytype1, mycustomtype2] # Optional, you can restrict allowed cache types
#            servers:
#                - { domain: kooqit.local, ip: 127.0.0.1, port: 80}
