sonata_block:
    default_contexts: [cms]
    blocks:
        # Enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts:   [admin]
        sonata.block.service.text:
        sonata.block.service.rss:

        # Some specific block from the SonataMediaBundle
        sonata.media.block.media:
        sonata.media.block.gallery:
        sonata.media.block.feature_media:

        # @todo check against actual params in production
        #sonata.block.service.wysiwyg:
        #sonata.block.service.action:

sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    default_context: default
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr
    contexts:
        default:  # the default context is mandatory
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file
            # @todo check against actual params in production
            formats:
                small: { width: 100 , quality: 70}
                big:   { width: 500 , quality: 70}

    cdn:
        server:
            path: /uploads/media # http://media.sonata-project.org/
            # @todo check against actual params in production

    filesystem:
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     false
            # @todo check against actual params in production
    #providers:
        #image:
            #resizer: sonata.media.resizer.square
            # @todo check against actual params in productionyy

sonata_page:
    multisite: host
    use_streamed_response: true # set the value to false in debug mode or if the reverse proxy does not handle streamed response
    ignore_route_patterns:
        - ^(.*)admin(.*)   # ignore admin route, ie route containing 'admin'
        - ^_(.*)          # ignore symfony routes

    ignore_routes:
        - sonata_page_esi_cache
        - sonata_page_ssi_cache
        - sonata_page_js_sync_cache
        - sonata_page_js_async_cache
        - sonata_cache_esi
        - sonata_cache_ssi
        - sonata_cache_js_async
        - sonata_cache_js_sync
        - sonata_cache_apc

    ignore_uri_patterns:
        - ^/admin\/   # ignore admin route, ie route containing 'admin'

    page_defaults:
        homepage: {decorate: false} # disable decoration for homepage, key - is a page route

    default_template: default # template key from templates section, used as default for pages
    templates:
        default: {path: 'SonataPageBundle::layout.html.twig', name: default }
        # @todo check against actual params in productionyy
        #ecoute: {path: 'SonataPageBundle::ecoute2.html.twig', name: ecoute }

    # manage the http errors
    catch_exceptions:
        not_found: [404]    # render 404 page with "not_found" key (name generated: _page_internal_error_{key})
        fatal:     [500]    # so you can use the same page for different http errors or specify specific page for each error

sonata_notification:
    admin:
        enabled: true
    backend: sonata.notification.backend.doctrine
    #backend: sonata.notification.backend.runtime
    backends:
        doctrine:
            message_manager: sonata.notification.manager.message.default
            max_age:         86400     # max age in second
            pause:           500000    # delay in microseconds
            batch_size:      10        # number of messages on each iteration
            states:                    # raising errors level
                in_progress: 10
                error:       20
                open:        100
                done:        10000

sonata_seo:
    encoding:         UTF-8
    page:
        default:          sonata.seo.page.default
        title:            Sonata Project
        metas:
            name:
                keywords:             foo bar
                description:          The description
                robots:               index, follow

            property:
                # Facebook application settings
                #'fb:app_id':          XXXXXX
                #'fb:admins':          admin1, admin2

                # Open Graph information
                # see http://developers.facebook.com/docs/opengraphprotocol/#types or http://ogp.me/
                'og:site_name':       Sonata Project Sandbox
                'og:description':     A demo of the some rich bundles for your Symfony2 projects

            http-equiv:
                'Content-Type':         text/html; charset=utf-8
                #'X-Ua-Compatible':      IE=EmulateIE7

            charset:
                UTF-8:    ''

        head:
            'xmlns':              http://www.w3.org/1999/xhtml
            'xmlns:og':           http://opengraphprotocol.org/schema/
            #'xmlns:fb':           "http://www.facebook.com/2008/fbml"

sonata_cache:
#    caches:
#        esi:
#            token: an unique security key # a random one is generated by default
#            servers:
#                - varnishadm -T 127.0.0.1:2000 {{ COMMAND }} "{{ EXPRESSION }}"
#        predis:
#            servers:
#                - {host: 127.0.0.1, port: 6379, database: 42}
#
#        apc:
#            token:  s3cur3   # token used to clear the related cache
#            prefix: test     # prefix to ensure there is no clash between instances
#            servers:
#                - { domain: kooqit.local, ip: 127.0.0.1, port: 80}
#
#        symfony:
#            token: s3cur3 # token used to clear the related cache
#            php_cache_enabled: true # Optional (default: false), clear APC or PHP OPcache
#            types: [mytype1, mycustomtype2] # Optional, you can restrict allowed cache types
#            servers:
#                - { domain: kooqit.local, ip: 127.0.0.1, port: 80}